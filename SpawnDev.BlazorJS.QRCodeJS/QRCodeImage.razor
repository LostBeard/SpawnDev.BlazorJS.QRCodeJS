@using Microsoft.AspNetCore.Components.Routing
@using QRCodeJS;
@using static SpawnDev.BlazorJS.QRCodeJS.QRCode
@implements IDisposable;

<img title="@FullText" src="@ImageSource" style="@_Style" class="@Class" />

@code {
    [Inject]
    NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    BlazorJSRuntime JS { get; set; } = default!;

    [Inject]
    QRCodeJSService QRCodeJSService { get; set; } = default!;

    public string FullText => QRCodeJSService.GetText(Text, TextType);

    string ImageSource => QRCodeJSService.CreateDataUrl(new QRCodeOptions
    {
        ColorDark = ColorDark,
        ColorLight = ColorLight,
        CorrectLevel = CorrectLevel,
        Height = Height,
        Width = Width,
        Text = Text,
    }, "image/png", TextType);
    string _Style => ShowLightBorder  ? $"border: {LightBorderSize} solid {ColorLight ?? "#ffffff"};{Style}" : Style;
    /// <summary>
    /// QRCode link data
    /// </summary>
    [Parameter]
    public string Text { get; set; } = "";
    /// <summary>
    /// Width. Default 256
    /// </summary>
    [Parameter]
    public int? Width { get; set; }
    /// <summary>
    /// Height. Default 256
    /// </summary>
    [Parameter]
    public int? Height { get; set; }
    /// <summary>
    /// The dark color to use. Default: #000000
    /// </summary>
    [Parameter]
    public string? ColorDark { get; set; } = "#000000";
    /// <summary>
    /// The light color to use. Default: #ffffff
    /// </summary>
    [Parameter]
    public string? ColorLight { get; set; } = "#ffffff";
    /// <summary>
    /// CorrectLevel. Default: CorrectLevel.H
    /// </summary>
    [Parameter]
    public CorrectLevel? CorrectLevel { get; set; }
    /// <summary>
    /// DataTextType indicates how DataText should be processed before rendering
    /// </summary>
    [Parameter]
    public DataTextType TextType { get; set; } = DataTextType.Text;
    /// <summary>
    /// Style to apply to the img/svg element
    /// </summary>
    [Parameter]
    public string Style { get; set; } = "";
    /// <summary>
    /// If true, 'border: 0.5rem solid ColorLight;' will be added to the style
    /// </summary>
    [Parameter]
    public bool ShowLightBorder { get; set; } = true;
    /// <summary>
    /// The size of the light border (if enabled)
    /// </summary>
    [Parameter]
    public string LightBorderSize{ get; set; } = "0.5rem";
    /// <summary>
    /// Class to apply to the img/svg element
    /// </summary>
    [Parameter]
    public string Class { get; set; } = "";
    /// <summary>
    /// If true (default) a UriRelativeUrl data text URL will automatically be updated when NavigationManager.LocationChanged event fires
    /// </summary>
    [Parameter]
    public bool AutoUpdateUriRelativeUrl { get; set; } = true;

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += NavigationManager_LocationChanged;
    }
    public void Dispose()
    {
        NavigationManager.LocationChanged -= NavigationManager_LocationChanged;
    }
    void NavigationManager_LocationChanged(object? sender, LocationChangedEventArgs locationChangedEventArgs)
    {
        if (TextType == DataTextType.UriRelativeUrl && AutoUpdateUriRelativeUrl)
        {
            StateHasChanged();
        }
    }
}
